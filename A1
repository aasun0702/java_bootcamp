//49.Group Anagrams
public List<List<String>> groupAnagrams(String[] strs) {

List<List<String>> result = new ArrayList<List<String>>();

//corner case
if(strs == null || strs.length == 0){
return result ;
}

//main logic
    HashMap<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
    for(String str: strs){
        char[] arr = new char[26];
        for(int i=0; i<str.length(); i++){
            arr[str.charAt(i)-'a']++;
        }
        String ns = new String(arr);
 
        if(map.containsKey(ns)){
            map.get(ns).add(str);
        }else{
            ArrayList<String> al = new ArrayList<String>();
            al.add(str);
            map.put(ns, al);
        }
    }
 
    result.addAll(map.values());
 
    return result;
}






//344.Reverse String
public String ReverseString(String s){
//corner case
if(s == null || s.length == 0){
return s ;
}

//main logic
String res = new String() ;
for(int i = s.length-1 ; i >=0 ; i--){
res = res + s[i] ; 
}
return res ;
}






//19 Remove Nth Node From End of List
public ListNode(ListNode head , int n){
//corner case
if(head == null){
return head ;
}

//main logic
ListNode fast = head ;
ListNode slow = head ;


while(n > 0){
fast = fast.next ;
n-- ;
}

//判断要删除的是否为头元素
if(fast == null){
return head.next ; 
}


while(fast != null){
fast = fast.next ; 
slow = slow.next ;
}

slow.next = slow.next.next ;
return head ;
}







//66.Plus One
public int[] PlusOne(int[] digit){
//corner case
if(digit == null || digit.length == 0){
return 
}

//main logic
int carry = 1 ;
int length = digit.length ;

for(int i = digit.length - 1 ; i >= 0 ; i--){
digit[i] = (digit[i] + carry) % 10 ; 
carry = (digit[i] + carry) / 10 ; 
}

if(carry != 0){
int[] res = new int[length + 1] ;
for(int i = digit.length ; i > 0 ; i--){
res[i] = digits[i] ; 
res[0] = 1 ;
}
return res ; 
}

return digit ;
}
